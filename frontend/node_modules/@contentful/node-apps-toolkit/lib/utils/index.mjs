var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// package.json
var require_package = __commonJS({
  "package.json"(exports, module) {
    module.exports = {
      name: "@contentful/node-apps-toolkit",
      version: "3.13.1",
      description: "A collection of helpers and utilities for creating NodeJS Contentful Apps",
      main: "lib/index.cjs",
      module: "lib/index.mjs",
      types: "lib/index.d.ts",
      files: [
        "lib/**/*"
      ],
      exports: {
        ".": {
          import: "./lib/index.mjs",
          require: "./lib/index.cjs"
        },
        "./keys": {
          import: "./lib/keys/index.mjs",
          require: "./lib/keys/index.cjs"
        },
        "./requests": {
          import: "./lib/requests/index.mjs",
          require: "./lib/requests/index.cjs"
        },
        "./requests/typings": {
          import: "./lib/requests//typingsindex.mjs",
          require: "./lib/requests/typings/index.cjs"
        },
        "./utils": {
          import: "./lib/utils/index.mjs",
          require: "./lib/utils/index.cjs"
        }
      },
      engines: {
        node: ">=18"
      },
      scripts: {
        prepare: "husky install",
        lint: "eslint --ext .ts ./src",
        "lint:fix": "npm run lint -- --fix",
        pretest: "echo ' \u{1F511} Creating valid keypair for testing' && sh test/make-private-keys.sh &> /dev/null",
        "test:unit": "mocha -r dotenv/config -r ts-node/register ./src/**/*.spec.ts",
        "test:integration": "mocha -r dotenv/config -r ts-node/register --timeout 10000 ./test/**/*.test.ts",
        test: "npm run test:unit && npm run test:integration",
        build: "rm -rf lib && tsup",
        postbuild: "cp ./lib/index.d.ts ./lib/index.d.cts",
        "build:docs": "typedoc --options .typedocrc.json src",
        "start:docs": "serve ./docs",
        prepublishOnly: "npm run build && npm run build:docs",
        "semantic-release": "semantic-release",
        format: "prettier --write ./{src,test}/**/*.ts"
      },
      author: "Contentful GmbH",
      license: "MIT",
      dependencies: {
        "@types/debug": "^4.1.5",
        "contentful-management": "^11.6.1",
        debug: "^4.2.0",
        got: "^11.7.0",
        jsonwebtoken: "^9.0.0",
        "lru-cache": "^10.4.3",
        runtypes: "^5.0.1"
      },
      devDependencies: {
        "@semantic-release/changelog": "6.0.3",
        "@semantic-release/git": "10.0.1",
        "@types/jsonwebtoken": "9.0.6",
        "@types/mocha": "10.0.6",
        "@types/node": "22.5.4",
        "@types/sinon": "17.0.3",
        "@typescript-eslint/eslint-plugin": "7.10.0",
        "@typescript-eslint/parser": "7.10.0",
        base64url: "3.0.1",
        dotenv: "16.4.5",
        eslint: "8.57.0",
        "eslint-config-prettier": "9.1.0",
        "eslint-plugin-prettier": "^5.0.0",
        husky: "9.0.11",
        "lint-staged": "15.2.10",
        mocha: "10.4.0",
        prettier: "3.2.5",
        "semantic-release": "23.1.1",
        serve: "14.2.4",
        sinon: "18.0.0",
        "ts-node": "10.9.2",
        tsup: "^8.3.5",
        typedoc: "0.25.13",
        typescript: "5.4.5"
      },
      "lint-staged": {
        "*.ts": [
          "npm run lint:fix",
          "npm run format"
        ]
      },
      repository: {
        url: "github:contentful/node-apps-toolkit",
        type: "git"
      }
    };
  }
});

// node_modules/tsup/assets/esm_shims.js
import { fileURLToPath } from "url";
import path from "path";
var getFilename = () => fileURLToPath(import.meta.url);
var getDirname = () => path.dirname(getFilename());
var __dirname = /* @__PURE__ */ getDirname();

// src/utils/http.ts
import got, { HTTPError } from "got";
var config = {
  prefixUrl: process.env.BASE_URL || "https://api.contentful.com",
  retry: { limit: 3 }
};
var createHttpClient = (configOverride = {}) => {
  return got.extend({ ...config, ...configOverride });
};
var createValidateStatusCode = (allowedStatusCodes) => (response) => {
  if (!allowedStatusCodes.includes(response.statusCode)) {
    console.log(response.body);
    throw new HTTPError(response);
  }
  return response;
};

// src/utils/logger.ts
import * as path2 from "path";
import debug from "debug";
var SRC_PATH = path2.join(__dirname, "..");
var { name: APP_NAME } = require_package();
var getNamespaceFromFilename = (filename) => {
  return filename.split(SRC_PATH)[1].slice(0, -3);
};
var createLogger = (opts) => {
  const ns = "namespace" in opts ? opts.namespace : getNamespaceFromFilename(opts.filename);
  return debug(APP_NAME).extend(ns);
};
export {
  HTTPError as HttpError,
  createHttpClient,
  createLogger,
  createValidateStatusCode
};
//# sourceMappingURL=index.mjs.map