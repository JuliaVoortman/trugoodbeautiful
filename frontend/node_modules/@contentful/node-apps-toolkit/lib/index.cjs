"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// package.json
var require_package = __commonJS({
  "package.json"(exports2, module2) {
    module2.exports = {
      name: "@contentful/node-apps-toolkit",
      version: "3.13.1",
      description: "A collection of helpers and utilities for creating NodeJS Contentful Apps",
      main: "lib/index.cjs",
      module: "lib/index.mjs",
      types: "lib/index.d.ts",
      files: [
        "lib/**/*"
      ],
      exports: {
        ".": {
          import: "./lib/index.mjs",
          require: "./lib/index.cjs"
        },
        "./keys": {
          import: "./lib/keys/index.mjs",
          require: "./lib/keys/index.cjs"
        },
        "./requests": {
          import: "./lib/requests/index.mjs",
          require: "./lib/requests/index.cjs"
        },
        "./requests/typings": {
          import: "./lib/requests//typingsindex.mjs",
          require: "./lib/requests/typings/index.cjs"
        },
        "./utils": {
          import: "./lib/utils/index.mjs",
          require: "./lib/utils/index.cjs"
        }
      },
      engines: {
        node: ">=18"
      },
      scripts: {
        prepare: "husky install",
        lint: "eslint --ext .ts ./src",
        "lint:fix": "npm run lint -- --fix",
        pretest: "echo ' \u{1F511} Creating valid keypair for testing' && sh test/make-private-keys.sh &> /dev/null",
        "test:unit": "mocha -r dotenv/config -r ts-node/register ./src/**/*.spec.ts",
        "test:integration": "mocha -r dotenv/config -r ts-node/register --timeout 10000 ./test/**/*.test.ts",
        test: "npm run test:unit && npm run test:integration",
        build: "rm -rf lib && tsup",
        postbuild: "cp ./lib/index.d.ts ./lib/index.d.cts",
        "build:docs": "typedoc --options .typedocrc.json src",
        "start:docs": "serve ./docs",
        prepublishOnly: "npm run build && npm run build:docs",
        "semantic-release": "semantic-release",
        format: "prettier --write ./{src,test}/**/*.ts"
      },
      author: "Contentful GmbH",
      license: "MIT",
      dependencies: {
        "@types/debug": "^4.1.5",
        "contentful-management": "^11.6.1",
        debug: "^4.2.0",
        got: "^11.7.0",
        jsonwebtoken: "^9.0.0",
        "lru-cache": "^10.4.3",
        runtypes: "^5.0.1"
      },
      devDependencies: {
        "@semantic-release/changelog": "6.0.3",
        "@semantic-release/git": "10.0.1",
        "@types/jsonwebtoken": "9.0.6",
        "@types/mocha": "10.0.6",
        "@types/node": "22.5.4",
        "@types/sinon": "17.0.3",
        "@typescript-eslint/eslint-plugin": "7.10.0",
        "@typescript-eslint/parser": "7.10.0",
        base64url: "3.0.1",
        dotenv: "16.4.5",
        eslint: "8.57.0",
        "eslint-config-prettier": "9.1.0",
        "eslint-plugin-prettier": "^5.0.0",
        husky: "9.0.11",
        "lint-staged": "15.2.10",
        mocha: "10.4.0",
        prettier: "3.2.5",
        "semantic-release": "23.1.1",
        serve: "14.2.4",
        sinon: "18.0.0",
        "ts-node": "10.9.2",
        tsup: "^8.3.5",
        typedoc: "0.25.13",
        typescript: "5.4.5"
      },
      "lint-staged": {
        "*.ts": [
          "npm run lint:fix",
          "npm run format"
        ]
      },
      repository: {
        url: "github:contentful/node-apps-toolkit",
        type: "git"
      }
    };
  }
});

// src/index.ts
var index_exports = {};
__export(index_exports, {
  CanonicalRequestValidator: () => CanonicalRequestValidator,
  ContentfulContextHeader: () => ContentfulContextHeader,
  ContentfulHeader: () => ContentfulHeader,
  ExpiredRequestException: () => ExpiredRequestException,
  FunctionTypeEnum: () => FunctionTypeEnum,
  RequestMetadataValidator: () => RequestMetadataValidator,
  SecretValidator: () => SecretValidator,
  TimeToLiveValidator: () => TimeToLiveValidator,
  TimestampValidator: () => TimestampValidator,
  getManagementToken: () => getManagementToken,
  signRequest: () => signRequest,
  verifyRequest: () => verifyRequest
});
module.exports = __toCommonJS(index_exports);

// src/keys/get-management-token.ts
var jwtImpl = __toESM(require("jsonwebtoken"));
var import_lru_cache = require("lru-cache");

// src/utils/http.ts
var import_got = __toESM(require("got"));
var config = {
  prefixUrl: process.env.BASE_URL || "https://api.contentful.com",
  retry: { limit: 3 }
};
var createHttpClient = (configOverride = {}) => {
  return import_got.default.extend({ ...config, ...configOverride });
};
var createValidateStatusCode = (allowedStatusCodes) => (response) => {
  if (!allowedStatusCodes.includes(response.statusCode)) {
    console.log(response.body);
    throw new import_got.HTTPError(response);
  }
  return response;
};

// src/utils/logger.ts
var path = __toESM(require("path"));
var import_debug = __toESM(require("debug"));
var SRC_PATH = path.join(__dirname, "..");
var { name: APP_NAME } = require_package();
var getNamespaceFromFilename = (filename) => {
  return filename.split(SRC_PATH)[1].slice(0, -3);
};
var createLogger = (opts) => {
  const ns = "namespace" in opts ? opts.namespace : getNamespaceFromFilename(opts.filename);
  return (0, import_debug.default)(APP_NAME).extend(ns);
};

// src/keys/get-management-token.ts
var jwt = "default" in jwtImpl ? jwtImpl.default : jwtImpl;
var { sign, decode } = jwt;
var defaultCache;
var generateOneTimeToken = (privateKey, { appId, keyId }, { log }) => {
  log("Signing a JWT token with private key");
  try {
    const baseSignOptions = { algorithm: "RS256", issuer: appId, expiresIn: "10m" };
    const signOptions = keyId ? { ...baseSignOptions, keyid: keyId } : baseSignOptions;
    const token = sign({}, privateKey, signOptions);
    log("Successfully signed token");
    return token;
  } catch (e) {
    log("Unable to sign token");
    throw e;
  }
};
var getTokenFromOneTimeToken = async (appToken, {
  appInstallationId,
  spaceId,
  environmentId
}, { log, http }) => {
  const validateStatusCode = createValidateStatusCode([201]);
  log(`Requesting CMA Token with given App Token`);
  const response = await http.post(
    `spaces/${spaceId}/environments/${environmentId}/app_installations/${appInstallationId}/access_tokens`,
    {
      headers: {
        Authorization: `Bearer ${appToken}`
      },
      hooks: {
        afterResponse: [validateStatusCode]
      }
    }
  );
  log(
    `Successfully retrieved CMA Token for app ${appInstallationId} in space ${spaceId} and environment ${environmentId}`
  );
  return JSON.parse(response.body).token;
};
var createGetManagementToken = (log, http, cache) => {
  return async (privateKey, opts) => {
    if (!(typeof privateKey === "string")) {
      throw new ReferenceError("Invalid privateKey: expected a string representing a private key");
    }
    if (opts.reuseToken === void 0) {
      opts.reuseToken = true;
    }
    const cacheKey = opts.appInstallationId + opts.spaceId + opts.environmentId + privateKey.slice(32, 132);
    if (opts.reuseToken) {
      const existing = cache.get(cacheKey);
      if (existing) {
        return existing;
      }
    }
    const appToken = generateOneTimeToken(
      privateKey,
      { appId: opts.appInstallationId, keyId: opts.keyId },
      { log }
    );
    const ott = await getTokenFromOneTimeToken(appToken, opts, { log, http });
    if (opts.reuseToken) {
      const decoded = decode(ott);
      if (decoded && typeof decoded === "object" && decoded.exp) {
        const safetyMargin = 10;
        const ttlSeconds = decoded.exp - Math.floor(Date.now() / 1e3) - safetyMargin;
        cache.set(cacheKey, ott, { ttl: ttlSeconds });
      }
    }
    return ott;
  };
};
var getManagementToken = (privateKey, opts) => {
  if ((opts.reuseToken || opts.reuseToken === void 0) && !defaultCache) {
    defaultCache = new import_lru_cache.LRUCache({ max: 10 });
  }
  const httpClientOpts = typeof opts.host !== "undefined" ? { prefixUrl: opts.host } : {};
  return createGetManagementToken(
    createLogger({ filename: __filename }),
    createHttpClient(httpClientOpts),
    defaultCache
  )(privateKey, opts);
};

// src/requests/exceptions.ts
var ExpiredRequestException = class extends Error {
  constructor(ttl) {
    super();
    this.ttl = ttl;
    this.message = `[${this.constructor.name}]: Requests are expected to be verified within ${this.ttl}s from their signature.`;
  }
};

// src/requests/sign-request.ts
var crypto = __toESM(require("crypto"));

// src/requests/typings/function.ts
var FunctionTypeEnum = /* @__PURE__ */ ((FunctionTypeEnum2) => {
  FunctionTypeEnum2["GraphqlFieldMapping"] = "graphql.field.mapping";
  FunctionTypeEnum2["GraphqlResourceTypeMapping"] = "graphql.resourcetype.mapping";
  FunctionTypeEnum2["GraphqlQuery"] = "graphql.query";
  FunctionTypeEnum2["AppEventFilter"] = "appevent.filter";
  FunctionTypeEnum2["AppEventHandler"] = "appevent.handler";
  FunctionTypeEnum2["AppEventTransformation"] = "appevent.transformation";
  FunctionTypeEnum2["AppActionCall"] = "appaction.call";
  FunctionTypeEnum2["ResourcesSearch"] = "resources.search";
  FunctionTypeEnum2["ResourcesLookup"] = "resources.lookup";
  return FunctionTypeEnum2;
})(FunctionTypeEnum || {});

// src/requests/typings/request.ts
var ContentfulHeader = /* @__PURE__ */ ((ContentfulHeader2) => {
  ContentfulHeader2["Timestamp"] = "x-contentful-timestamp";
  ContentfulHeader2["SignedHeaders"] = "x-contentful-signed-headers";
  ContentfulHeader2["Signature"] = "x-contentful-signature";
  return ContentfulHeader2;
})(ContentfulHeader || {});
var ContentfulContextHeader = /* @__PURE__ */ ((ContentfulContextHeader2) => {
  ContentfulContextHeader2["CRN"] = "x-contentful-crn";
  ContentfulContextHeader2["SpaceId"] = "x-contentful-space-id";
  ContentfulContextHeader2["EnvironmentId"] = "x-contentful-environment-id";
  ContentfulContextHeader2["UserId"] = "x-contentful-user-id";
  ContentfulContextHeader2["AppId"] = "x-contentful-app-id";
  return ContentfulContextHeader2;
})(ContentfulContextHeader || {});

// src/requests/typings/validators.ts
var runtypes = __toESM(require("runtypes"));
var MethodValidator = runtypes.Union(
  runtypes.Literal("GET"),
  runtypes.Literal("PATCH"),
  runtypes.Literal("HEAD"),
  runtypes.Literal("POST"),
  runtypes.Literal("DELETE"),
  runtypes.Literal("OPTIONS"),
  runtypes.Literal("PUT")
);
var PathValidator = runtypes.String.withConstraint((s) => s.startsWith("/"), {
  name: "CanonicalURI"
});
var SignatureValidator = runtypes.String.withConstraint((s) => s.length === 64, {
  name: "SignatureLength"
});
var CanonicalRequestValidator = runtypes.Record({
  method: MethodValidator,
  path: PathValidator
}).And(
  runtypes.Partial({
    headers: runtypes.Dictionary(runtypes.String, "string"),
    body: runtypes.String
  })
);
var SecretValidator = runtypes.String.withConstraint((s) => s.length === 64, {
  name: "SecretLength"
});
var TimestampValidator = runtypes.Number.withConstraint((n) => n > 15778368e5, {
  name: "TimestampAge"
});
var SignedHeadersValidator = runtypes.Array(runtypes.String).withConstraint((l) => l.length >= 2, { name: "MissingTimestampOrSignedHeaders" });
var RequestMetadataValidator = runtypes.Record({
  signature: SignatureValidator,
  timestamp: TimestampValidator,
  signedHeaders: SignedHeadersValidator
});
var TimeToLiveValidator = runtypes.Number.withConstraint((n) => n >= 0, {
  name: "PositiveNumber"
});

// src/requests/utils.ts
var querystring = __toESM(require("querystring"));
var getNormalizedEncodedURI = (uri) => {
  const [pathname, search] = uri.split("?");
  const escapedSearch = search ? querystring.escape(search) : "";
  return encodeURI(escapedSearch ? `${pathname}?${escapedSearch}` : pathname);
};
var sortHeaderKeys = (keyA, keyB) => keyA > keyB ? 1 : -1;
var normalizeHeaderKey = (key) => key.toLowerCase().trim();
var normalizeHeaderValue = (value) => value.trim();
var normalizeHeaders = (headers) => map(headers, ([key, value]) => [normalizeHeaderKey(key), normalizeHeaderValue(value)]);
var pickHeaders = (headers, keys) => {
  if (!headers) {
    return {};
  }
  if (!keys) {
    return headers;
  }
  return filter(headers, ([key]) => keys.includes(key));
};
var contextHeadersMap = {
  crn: "x-contentful-crn" /* CRN */,
  spaceId: "x-contentful-space-id" /* SpaceId */,
  envId: "x-contentful-environment-id" /* EnvironmentId */,
  appId: "x-contentful-app-id" /* AppId */,
  userId: "x-contentful-user-id" /* UserId */
};
function normalizeContextHeaders(rawContext) {
  return Object.keys(rawContext).reduce(
    (acc, header) => {
      if (contextHeadersMap[header]) {
        const key = normalizeHeaderKey(contextHeadersMap[header]);
        acc[key] = normalizeHeaderValue(
          acc[key] ?? rawContext[header]
        );
      }
      return acc;
    },
    {}
  );
}
var filter = (obj, callback) => {
  return Object.fromEntries(Object.entries(obj).filter(callback));
};
var map = (obj, callback) => {
  return Object.fromEntries(Object.entries(obj).map(callback));
};

// src/requests/sign-request.ts
var hash = (normalizedCanonicalRequest, secret) => {
  const stringifiedHeaders = normalizedCanonicalRequest.headers.map(([key, value]) => `${key}:${value}`).join(";");
  const stringifiedRequest = [
    normalizedCanonicalRequest.method,
    normalizedCanonicalRequest.path,
    stringifiedHeaders,
    normalizedCanonicalRequest.body
  ].join("\n");
  const hmac = crypto.createHmac("sha256", secret);
  hmac.update(stringifiedRequest);
  return hmac.digest("hex");
};
var getSortedAndSignedHeaders = (headers, timestamp) => {
  const rawSignedHeaders = Object.keys(headers);
  if (!("x-contentful-signed-headers" /* SignedHeaders */ in headers)) {
    rawSignedHeaders.push("x-contentful-signed-headers" /* SignedHeaders */);
  }
  if (!("x-contentful-timestamp" /* Timestamp */ in headers)) {
    rawSignedHeaders.push("x-contentful-timestamp" /* Timestamp */);
  }
  const signedHeaders = rawSignedHeaders.sort(sortHeaderKeys).join(",");
  headers["x-contentful-timestamp" /* Timestamp */] = timestamp.toString();
  headers["x-contentful-signed-headers" /* SignedHeaders */] = signedHeaders;
  const sortedHeaders = Object.entries(headers).sort(([keyA], [keyB]) => sortHeaderKeys(keyA, keyB));
  return { sortedHeaders, signedHeaders };
};
function signRequest(rawSecret, rawCanonicalRequest, rawTimestamp, rawContext) {
  const maybeDefaultTimestamp = rawTimestamp ?? Date.now();
  const canonicalRequest = CanonicalRequestValidator.check(rawCanonicalRequest);
  const timestamp = TimestampValidator.check(maybeDefaultTimestamp);
  const secret = SecretValidator.check(rawSecret);
  const path2 = getNormalizedEncodedURI(canonicalRequest.path);
  const method = canonicalRequest.method;
  const headers = canonicalRequest.headers ? normalizeHeaders(canonicalRequest.headers) : {};
  const body = canonicalRequest.body ?? "";
  const contextHeaders = rawContext ? normalizeContextHeaders(rawContext) : {};
  const { sortedHeaders, signedHeaders } = getSortedAndSignedHeaders(
    { ...headers, ...contextHeaders },
    timestamp
  );
  return {
    ["x-contentful-signature" /* Signature */]: hash({ method, headers: sortedHeaders, path: path2, body }, secret),
    ["x-contentful-signed-headers" /* SignedHeaders */]: signedHeaders,
    ["x-contentful-timestamp" /* Timestamp */]: timestamp.toString(),
    ...contextHeaders
  };
}

// src/requests/verify-request.ts
var getRequestMetadata = (normalizedHeaders) => {
  const signature = normalizedHeaders["x-contentful-signature" /* Signature */];
  const signedHeaders = (normalizedHeaders["x-contentful-signed-headers" /* SignedHeaders */] ?? "").split(",");
  const timestamp = Number.parseInt(normalizedHeaders["x-contentful-timestamp" /* Timestamp */] ?? "", 10);
  return RequestMetadataValidator.check({ signature, signedHeaders, timestamp });
};
var isRequestTimestampTooOld = (ttl, timestamp) => {
  return Date.now() - timestamp >= ttl * 1e3;
};
var verifyRequest = (rawSecret, rawCanonicalRequest, rawTimeToLive = 30) => {
  const canonicalRequest = CanonicalRequestValidator.check(rawCanonicalRequest);
  const secret = SecretValidator.check(rawSecret);
  const normalizedHeaders = normalizeHeaders(canonicalRequest.headers ?? {});
  const { signature, signedHeaders, timestamp } = getRequestMetadata(normalizedHeaders);
  if (rawTimeToLive !== 0 && isRequestTimestampTooOld(rawTimeToLive, timestamp)) {
    throw new ExpiredRequestException(rawTimeToLive);
  }
  const requestToValidate = {
    ...canonicalRequest,
    headers: pickHeaders(normalizedHeaders, signedHeaders)
  };
  const { ["x-contentful-signature" /* Signature */]: computedSignature } = signRequest(
    secret,
    requestToValidate,
    timestamp
  );
  return signature === computedSignature;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CanonicalRequestValidator,
  ContentfulContextHeader,
  ContentfulHeader,
  ExpiredRequestException,
  FunctionTypeEnum,
  RequestMetadataValidator,
  SecretValidator,
  TimeToLiveValidator,
  TimestampValidator,
  getManagementToken,
  signRequest,
  verifyRequest
});
//# sourceMappingURL=index.cjs.map