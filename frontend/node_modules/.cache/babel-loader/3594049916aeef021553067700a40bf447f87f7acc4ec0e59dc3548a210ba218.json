{"ast":null,"code":"var _jsxFileName = \"/Users/julia.voortman/Documents/trugoodbeautiful/frontend/src/components/map/WorldGlobe.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport Globe from \"react-globe.gl\";\nimport * as THREE from 'three'; // Import THREE\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WorldGlobe({\n  articles\n}) {\n  _s();\n  const globeEl = useRef();\n  useEffect(() => {\n    const globe = globeEl.current;\n\n    // Load the texture using THREE.TextureLoader\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(\"//unpkg.com/three-globe/example/img/earth-night.jpg\",\n    // Replace with your texture URL\n    texture => {\n      // Set the globe material with the loaded texture\n      globe.globeMaterial({\n        map: texture\n      });\n    });\n\n    // Load the bump map using THREE.TextureLoader\n    const bumpTextureLoader = new THREE.TextureLoader();\n    bumpTextureLoader.load(\"//unpkg.com/three-globe/example/img/earth-topology.png\",\n    // Replace with your bump map URL\n    bumpMap => {\n      globe.globeMaterial({\n        bumpMap: bumpMap,\n        bumpScale: 0.1\n      }); // Adjust bumpScale as needed\n    });\n  }, []);\n  const markers = articles.map(article => ({\n    lat: article.coordinates[1],\n    lng: article.coordinates[0],\n    size: 5,\n    color: getMarkerColor(article.sentiment)\n  }));\n  function getMarkerColor(sentiment) {\n    switch (sentiment) {\n      case \"Positive\":\n        return \"green\";\n      case \"Neutral\":\n        return \"yellow\";\n      case \"Negative\":\n        return \"red\";\n      default:\n        return \"gray\";\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(Globe, {\n    ref: globeEl,\n    pointsData: markers,\n    pointColor: \"color\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n}\n_s(WorldGlobe, \"EFxWCNvYXoXG6t8JTJFN0+m3ZSM=\");\n_c = WorldGlobe;\nexport default WorldGlobe;\nvar _c;\n$RefreshReg$(_c, \"WorldGlobe\");","map":{"version":3,"names":["React","useRef","useEffect","Globe","THREE","jsxDEV","_jsxDEV","WorldGlobe","articles","_s","globeEl","globe","current","textureLoader","TextureLoader","load","texture","globeMaterial","map","bumpTextureLoader","bumpMap","bumpScale","markers","article","lat","coordinates","lng","size","color","getMarkerColor","sentiment","ref","pointsData","pointColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/julia.voortman/Documents/trugoodbeautiful/frontend/src/components/map/WorldGlobe.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport Globe from \"react-globe.gl\";\nimport * as THREE from 'three'; // Import THREE\n\nfunction WorldGlobe({ articles }) {\n  const globeEl = useRef();\n\n  useEffect(() => {\n    const globe = globeEl.current;\n\n    // Load the texture using THREE.TextureLoader\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(\n      \"//unpkg.com/three-globe/example/img/earth-night.jpg\", // Replace with your texture URL\n      (texture) => {\n        // Set the globe material with the loaded texture\n        globe.globeMaterial({ map: texture });\n      }\n    );\n\n    // Load the bump map using THREE.TextureLoader\n    const bumpTextureLoader = new THREE.TextureLoader();\n    bumpTextureLoader.load(\n      \"//unpkg.com/three-globe/example/img/earth-topology.png\", // Replace with your bump map URL\n      (bumpMap) => {\n        globe.globeMaterial({ bumpMap: bumpMap, bumpScale: 0.1 }); // Adjust bumpScale as needed\n      }\n    );\n\n  }, []);\n\n  const markers = articles.map((article) => ({\n    lat: article.coordinates[1],\n    lng: article.coordinates[0],\n    size: 5,\n    color: getMarkerColor(article.sentiment),\n  }));\n\n  function getMarkerColor(sentiment) {\n    switch (sentiment) {\n      case \"Positive\":\n        return \"green\";\n      case \"Neutral\":\n        return \"yellow\";\n      case \"Negative\":\n        return \"red\";\n      default:\n        return \"gray\";\n    }\n  }\n\n  return <Globe ref={globeEl} pointsData={markers} pointColor=\"color\" />;\n}\n\nexport default WorldGlobe;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAO,KAAKC,KAAK,MAAM,OAAO,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,UAAUA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAChC,MAAMC,OAAO,GAAGT,MAAM,CAAC,CAAC;EAExBC,SAAS,CAAC,MAAM;IACd,MAAMS,KAAK,GAAGD,OAAO,CAACE,OAAO;;IAE7B;IACA,MAAMC,aAAa,GAAG,IAAIT,KAAK,CAACU,aAAa,CAAC,CAAC;IAC/CD,aAAa,CAACE,IAAI,CAChB,qDAAqD;IAAE;IACtDC,OAAO,IAAK;MACX;MACAL,KAAK,CAACM,aAAa,CAAC;QAAEC,GAAG,EAAEF;MAAQ,CAAC,CAAC;IACvC,CACF,CAAC;;IAED;IACA,MAAMG,iBAAiB,GAAG,IAAIf,KAAK,CAACU,aAAa,CAAC,CAAC;IACnDK,iBAAiB,CAACJ,IAAI,CACpB,wDAAwD;IAAE;IACzDK,OAAO,IAAK;MACXT,KAAK,CAACM,aAAa,CAAC;QAAEG,OAAO,EAAEA,OAAO;QAAEC,SAAS,EAAE;MAAI,CAAC,CAAC,CAAC,CAAC;IAC7D,CACF,CAAC;EAEH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,OAAO,GAAGd,QAAQ,CAACU,GAAG,CAAEK,OAAO,KAAM;IACzCC,GAAG,EAAED,OAAO,CAACE,WAAW,CAAC,CAAC,CAAC;IAC3BC,GAAG,EAAEH,OAAO,CAACE,WAAW,CAAC,CAAC,CAAC;IAC3BE,IAAI,EAAE,CAAC;IACPC,KAAK,EAAEC,cAAc,CAACN,OAAO,CAACO,SAAS;EACzC,CAAC,CAAC,CAAC;EAEH,SAASD,cAAcA,CAACC,SAAS,EAAE;IACjC,QAAQA,SAAS;MACf,KAAK,UAAU;QACb,OAAO,OAAO;MAChB,KAAK,SAAS;QACZ,OAAO,QAAQ;MACjB,KAAK,UAAU;QACb,OAAO,KAAK;MACd;QACE,OAAO,MAAM;IACjB;EACF;EAEA,oBAAOxB,OAAA,CAACH,KAAK;IAAC4B,GAAG,EAAErB,OAAQ;IAACsB,UAAU,EAAEV,OAAQ;IAACW,UAAU,EAAC;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACxE;AAAC5B,EAAA,CAhDQF,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAkDnB,eAAeA,UAAU;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}