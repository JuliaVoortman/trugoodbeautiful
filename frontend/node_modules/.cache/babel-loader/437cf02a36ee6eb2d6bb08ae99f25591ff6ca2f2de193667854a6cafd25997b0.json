{"ast":null,"code":"import { encodeCPAResponse } from '@contentful/content-source-maps';\nimport { createRequestConfig, errorHandler } from 'contentful-sdk-core';\nimport pagedSync from './paged-sync.js';\nimport normalizeSearchParameters from './utils/normalize-search-parameters.js';\nimport normalizeSelect from './utils/normalize-select.js';\nimport resolveCircular from './utils/resolve-circular.js';\nimport getQuerySelectionSet from './utils/query-selection-set.js';\nimport validateTimestamp from './utils/validate-timestamp.js';\nimport { validateLocaleParam, validateResolveLinksParam, validateRemoveUnresolvedParam, checkIncludeContentSourceMapsParamIsAllowed } from './utils/validate-params.js';\nimport validateSearchParameters from './utils/validate-search-parameters.js';\n\n/**\n * Contentful Delivery API Client. Contains methods which allow access to the\n * different kinds of entities present in Contentful (Entries, Assets, etc).\n */\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\nclass NotFoundError extends Error {\n  constructor(id, environment, space) {\n    super('The resource could not be found.');\n    this.sys = {\n      type: 'Error',\n      id: 'NotFound'\n    };\n    this.details = {\n      type: 'Entry',\n      id,\n      environment,\n      space\n    };\n  }\n}\nfunction createContentfulApi({\n  http,\n  getGlobalOptions\n}, options) {\n  const notFoundError = (id = 'unknown') => {\n    return new NotFoundError(id, getGlobalOptions().environment, getGlobalOptions().space);\n  };\n  const getBaseUrl = context => {\n    let baseUrl = context === 'space' ? getGlobalOptions().spaceBaseUrl : getGlobalOptions().environmentBaseUrl;\n    if (!baseUrl) {\n      throw new Error('Please define baseUrl for ' + context);\n    }\n    if (!baseUrl.endsWith('/')) {\n      baseUrl += '/';\n    }\n    return baseUrl;\n  };\n  function maybeEnableSourceMaps(query = {}) {\n    var _a, _b;\n    const params = http.httpClientParams;\n    const includeContentSourceMaps = (_a = params === null || params === undefined ? undefined : params.includeContentSourceMaps) !== null && _a !== undefined ? _a : (_b = params === null || params === undefined ? undefined : params.alphaFeatures) === null || _b === undefined ? undefined : _b.includeContentSourceMaps;\n    const host = params === null || params === undefined ? undefined : params.host;\n    const areAllowed = checkIncludeContentSourceMapsParamIsAllowed(host, includeContentSourceMaps);\n    if (areAllowed) {\n      query.includeContentSourceMaps = true;\n      // Ensure that content source maps and required attributes are selected\n      if (query.select) {\n        const selection = getQuerySelectionSet(query);\n        selection.add('sys');\n        query.select = Array.from(selection).join(',');\n      }\n    }\n    return query;\n  }\n  function maybeEncodeCPAResponse(data, config) {\n    var _a;\n    const includeContentSourceMaps = (_a = config === null || config === undefined ? undefined : config.params) === null || _a === undefined ? undefined : _a.includeContentSourceMaps;\n    if (includeContentSourceMaps) {\n      return encodeCPAResponse(data);\n    }\n    return data;\n  }\n  async function get({\n    context,\n    path,\n    config\n  }) {\n    const baseUrl = getBaseUrl(context);\n    try {\n      const response = await http.get(baseUrl + path, config);\n      return maybeEncodeCPAResponse(response.data, config);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function post({\n    context,\n    path,\n    data,\n    config\n  }) {\n    const baseUrl = getBaseUrl(context);\n    try {\n      const response = await http.post(baseUrl + path, data, config);\n      return response.data;\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function getSpace() {\n    return get({\n      context: 'space',\n      path: ''\n    });\n  }\n  async function getContentType(id) {\n    return get({\n      context: 'environment',\n      path: `content_types/${id}`\n    });\n  }\n  async function getContentTypes(query = {}) {\n    return get({\n      context: 'environment',\n      path: 'content_types',\n      config: createRequestConfig({\n        query\n      })\n    });\n  }\n  async function getEntry(id, query = {}) {\n    return makeGetEntry(id, query, options);\n  }\n  async function getEntries(query = {}) {\n    return makeGetEntries(query, options);\n  }\n  async function makeGetEntry(id, query, options = {\n    withAllLocales: false,\n    withoutLinkResolution: false,\n    withoutUnresolvableLinks: false\n  }) {\n    const {\n      withAllLocales\n    } = options;\n    validateLocaleParam(query, withAllLocales);\n    validateResolveLinksParam(query);\n    validateRemoveUnresolvedParam(query);\n    validateSearchParameters(query);\n    return internalGetEntry(id, withAllLocales ? Object.assign(Object.assign({}, query), {\n      locale: '*'\n    }) : query, options);\n  }\n  async function internalGetEntry(id, query, options) {\n    if (!id) {\n      throw notFoundError(id);\n    }\n    try {\n      const response = await internalGetEntries(Object.assign({\n        'sys.id': id\n      }, maybeEnableSourceMaps(query)), options);\n      if (response.items.length > 0) {\n        return response.items[0];\n      } else {\n        throw notFoundError(id);\n      }\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function makeGetEntries(query, options = {\n    withAllLocales: false,\n    withoutLinkResolution: false,\n    withoutUnresolvableLinks: false\n  }) {\n    const {\n      withAllLocales\n    } = options;\n    validateLocaleParam(query, withAllLocales);\n    validateResolveLinksParam(query);\n    validateRemoveUnresolvedParam(query);\n    validateSearchParameters(query);\n    return internalGetEntries(withAllLocales ? Object.assign(Object.assign({}, query), {\n      locale: '*'\n    }) : query, options);\n  }\n  async function internalGetEntries(query, options) {\n    const {\n      withoutLinkResolution,\n      withoutUnresolvableLinks\n    } = options;\n    try {\n      const entries = await get({\n        context: 'environment',\n        path: 'entries',\n        config: createRequestConfig({\n          query: maybeEnableSourceMaps(normalizeSearchParameters(normalizeSelect(query)))\n        })\n      });\n      return resolveCircular(entries, {\n        resolveLinks: !withoutLinkResolution,\n        removeUnresolved: withoutUnresolvableLinks !== null && withoutUnresolvableLinks !== void 0 ? withoutUnresolvableLinks : false\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function getAsset(id, query = {}) {\n    return makeGetAsset(id, query, options);\n  }\n  async function getAssets(query = {}) {\n    return makeGetAssets(query, options);\n  }\n  async function makeGetAssets(query, options = {\n    withAllLocales: false,\n    withoutLinkResolution: false,\n    withoutUnresolvableLinks: false\n  }) {\n    const {\n      withAllLocales\n    } = options;\n    validateLocaleParam(query, withAllLocales);\n    validateSearchParameters(query);\n    const localeSpecificQuery = withAllLocales ? Object.assign(Object.assign({}, query), {\n      locale: '*'\n    }) : query;\n    return internalGetAssets(localeSpecificQuery);\n  }\n  async function internalGetAsset(id, query) {\n    try {\n      return get({\n        context: 'environment',\n        path: `assets/${id}`,\n        config: createRequestConfig({\n          query: maybeEnableSourceMaps(normalizeSelect(query))\n        })\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function makeGetAsset(id, query, options = {\n    withAllLocales: false,\n    withoutLinkResolution: false,\n    withoutUnresolvableLinks: false\n  }) {\n    const {\n      withAllLocales\n    } = options;\n    validateLocaleParam(query, withAllLocales);\n    validateSearchParameters(query);\n    const localeSpecificQuery = withAllLocales ? Object.assign(Object.assign({}, query), {\n      locale: '*'\n    }) : query;\n    return internalGetAsset(id, localeSpecificQuery);\n  }\n  async function internalGetAssets(query) {\n    try {\n      return get({\n        context: 'environment',\n        path: 'assets',\n        config: createRequestConfig({\n          query: maybeEnableSourceMaps(normalizeSearchParameters(normalizeSelect(query)))\n        })\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function getTag(id) {\n    return get({\n      context: 'environment',\n      path: `tags/${id}`\n    });\n  }\n  async function getTags(query = {}) {\n    validateSearchParameters(query);\n    return get({\n      context: 'environment',\n      path: 'tags',\n      config: createRequestConfig({\n        query: normalizeSearchParameters(normalizeSelect(query))\n      })\n    });\n  }\n  async function createAssetKey(expiresAt) {\n    try {\n      const now = Math.floor(Date.now() / 1000);\n      const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\n      validateTimestamp('expiresAt', expiresAt, {\n        maximum: currentMaxLifetime,\n        now\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n    return post({\n      context: 'environment',\n      path: 'asset_keys',\n      data: {\n        expiresAt\n      }\n    });\n  }\n  async function getLocales(query = {}) {\n    validateSearchParameters(query);\n    return get({\n      context: 'environment',\n      path: 'locales',\n      config: createRequestConfig({\n        query: normalizeSelect(query)\n      })\n    });\n  }\n  async function sync(query, syncOptions = {\n    paginate: true\n  }) {\n    return makePagedSync(query, syncOptions, options);\n  }\n  async function makePagedSync(query, syncOptions, options = {\n    withAllLocales: false,\n    withoutLinkResolution: false,\n    withoutUnresolvableLinks: false\n  }) {\n    validateResolveLinksParam(query);\n    validateRemoveUnresolvedParam(query);\n    const combinedOptions = Object.assign(Object.assign({}, syncOptions), options);\n    switchToEnvironment(http);\n    return pagedSync(http, query, combinedOptions);\n  }\n  function parseEntries(data) {\n    return makeParseEntries(data, options);\n  }\n  function makeParseEntries(data, options = {\n    withAllLocales: false,\n    withoutLinkResolution: false,\n    withoutUnresolvableLinks: false\n  }) {\n    return internalParseEntries(data, options);\n  }\n  function internalParseEntries(data, options) {\n    const {\n      withoutLinkResolution,\n      withoutUnresolvableLinks\n    } = options;\n    return resolveCircular(data, {\n      resolveLinks: !withoutLinkResolution,\n      removeUnresolved: withoutUnresolvableLinks !== null && withoutUnresolvableLinks !== undefined ? withoutUnresolvableLinks : false\n    });\n  }\n  function getConceptScheme(id, query = {}) {\n    return internalGetConceptScheme(id, query);\n  }\n  async function internalGetConceptScheme(id, query = {}) {\n    try {\n      return get({\n        context: 'environment',\n        path: `taxonomy/concept-schemes/${id}`,\n        config: createRequestConfig({\n          query: normalizeSearchParameters(normalizeSelect(query))\n        })\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  function getConceptSchemes(query = {}) {\n    return internalGetConceptSchemes(query);\n  }\n  async function internalGetConceptSchemes(query = {}) {\n    try {\n      return get({\n        context: 'environment',\n        path: 'taxonomy/concept-schemes',\n        config: createRequestConfig({\n          query: normalizeSearchParameters(normalizeSelect(query))\n        })\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  function getConcept(id, query = {}) {\n    return internalGetConcept(id, query);\n  }\n  async function internalGetConcept(id, query = {}) {\n    try {\n      return get({\n        context: 'environment',\n        path: `taxonomy/concepts/${id}`,\n        config: createRequestConfig({\n          query: normalizeSearchParameters(normalizeSelect(query))\n        })\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  function getConcepts(query = {}) {\n    return internalGetConcepts(query);\n  }\n  async function internalGetConcepts(query = {}) {\n    try {\n      return get({\n        context: 'environment',\n        path: 'taxonomy/concepts',\n        config: createRequestConfig({\n          query: normalizeSearchParameters(normalizeSelect(query))\n        })\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /*\n   * Switches BaseURL to use /environments path\n   * */\n  function switchToEnvironment(http) {\n    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\n  }\n  return {\n    version: \"11.4.6\",\n    getSpace,\n    getContentType,\n    getContentTypes,\n    getAsset,\n    getAssets,\n    getTag,\n    getTags,\n    getLocales,\n    parseEntries,\n    sync,\n    getEntry,\n    getEntries,\n    getConceptScheme,\n    getConceptSchemes,\n    getConcept,\n    getConcepts,\n    createAssetKey\n  };\n}\nexport { createContentfulApi as default };","map":{"version":3,"names":["encodeCPAResponse","createRequestConfig","errorHandler","pagedSync","normalizeSearchParameters","normalizeSelect","resolveCircular","getQuerySelectionSet","validateTimestamp","validateLocaleParam","validateResolveLinksParam","validateRemoveUnresolvedParam","checkIncludeContentSourceMapsParamIsAllowed","validateSearchParameters","ASSET_KEY_MAX_LIFETIME","NotFoundError","Error","constructor","id","environment","space","sys","type","details","createContentfulApi","http","getGlobalOptions","options","notFoundError","getBaseUrl","context","baseUrl","spaceBaseUrl","environmentBaseUrl","endsWith","maybeEnableSourceMaps","query","_a","_b","params","httpClientParams","includeContentSourceMaps","undefined","alphaFeatures","host","areAllowed","select","selection","add","Array","from","join","maybeEncodeCPAResponse","data","config","get","path","response","error","post","getSpace","getContentType","getContentTypes","getEntry","makeGetEntry","getEntries","makeGetEntries","withAllLocales","withoutLinkResolution","withoutUnresolvableLinks","internalGetEntry","Object","assign","locale","internalGetEntries","items","length","entries","resolveLinks","removeUnresolved","getAsset","makeGetAsset","getAssets","makeGetAssets","localeSpecificQuery","internalGetAssets","internalGetAsset","getTag","getTags","createAssetKey","expiresAt","now","Math","floor","Date","currentMaxLifetime","maximum","getLocales","sync","syncOptions","paginate","makePagedSync","combinedOptions","switchToEnvironment","parseEntries","makeParseEntries","internalParseEntries","getConceptScheme","internalGetConceptScheme","getConceptSchemes","internalGetConceptSchemes","getConcept","internalGetConcept","getConcepts","internalGetConcepts","defaults","baseURL","version","default"],"sources":["/Users/julia.voortman/Documents/trugoodbeautiful/frontend/node_modules/contentful/dist/esm/create-contentful-api.js"],"sourcesContent":["import { encodeCPAResponse } from '@contentful/content-source-maps';\nimport { createRequestConfig, errorHandler } from 'contentful-sdk-core';\nimport pagedSync from './paged-sync.js';\nimport normalizeSearchParameters from './utils/normalize-search-parameters.js';\nimport normalizeSelect from './utils/normalize-select.js';\nimport resolveCircular from './utils/resolve-circular.js';\nimport getQuerySelectionSet from './utils/query-selection-set.js';\nimport validateTimestamp from './utils/validate-timestamp.js';\nimport { validateLocaleParam, validateResolveLinksParam, validateRemoveUnresolvedParam, checkIncludeContentSourceMapsParamIsAllowed } from './utils/validate-params.js';\nimport validateSearchParameters from './utils/validate-search-parameters.js';\n\n/**\n * Contentful Delivery API Client. Contains methods which allow access to the\n * different kinds of entities present in Contentful (Entries, Assets, etc).\n */\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\nclass NotFoundError extends Error {\n    constructor(id, environment, space) {\n        super('The resource could not be found.');\n        this.sys = {\n            type: 'Error',\n            id: 'NotFound',\n        };\n        this.details = {\n            type: 'Entry',\n            id,\n            environment,\n            space,\n        };\n    }\n}\nfunction createContentfulApi({ http, getGlobalOptions }, options) {\n    const notFoundError = (id = 'unknown') => {\n        return new NotFoundError(id, getGlobalOptions().environment, getGlobalOptions().space);\n    };\n    const getBaseUrl = (context) => {\n        let baseUrl = context === 'space' ? getGlobalOptions().spaceBaseUrl : getGlobalOptions().environmentBaseUrl;\n        if (!baseUrl) {\n            throw new Error('Please define baseUrl for ' + context);\n        }\n        if (!baseUrl.endsWith('/')) {\n            baseUrl += '/';\n        }\n        return baseUrl;\n    };\n    function maybeEnableSourceMaps(query = {}) {\n        var _a, _b;\n        const params = http.httpClientParams;\n        const includeContentSourceMaps = (_a = params === null || params === undefined ? undefined : params.includeContentSourceMaps) !== null && _a !== undefined ? _a : (_b = params === null || params === undefined ? undefined : params.alphaFeatures) === null || _b === undefined ? undefined : _b.includeContentSourceMaps;\n        const host = params === null || params === undefined ? undefined : params.host;\n        const areAllowed = checkIncludeContentSourceMapsParamIsAllowed(host, includeContentSourceMaps);\n        if (areAllowed) {\n            query.includeContentSourceMaps = true;\n            // Ensure that content source maps and required attributes are selected\n            if (query.select) {\n                const selection = getQuerySelectionSet(query);\n                selection.add('sys');\n                query.select = Array.from(selection).join(',');\n            }\n        }\n        return query;\n    }\n    function maybeEncodeCPAResponse(data, config) {\n        var _a;\n        const includeContentSourceMaps = (_a = config === null || config === undefined ? undefined : config.params) === null || _a === undefined ? undefined : _a.includeContentSourceMaps;\n        if (includeContentSourceMaps) {\n            return encodeCPAResponse(data);\n        }\n        return data;\n    }\n    async function get({ context, path, config }) {\n        const baseUrl = getBaseUrl(context);\n        try {\n            const response = await http.get(baseUrl + path, config);\n            return maybeEncodeCPAResponse(response.data, config);\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    async function post({ context, path, data, config }) {\n        const baseUrl = getBaseUrl(context);\n        try {\n            const response = await http.post(baseUrl + path, data, config);\n            return response.data;\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    async function getSpace() {\n        return get({ context: 'space', path: '' });\n    }\n    async function getContentType(id) {\n        return get({\n            context: 'environment',\n            path: `content_types/${id}`,\n        });\n    }\n    async function getContentTypes(query = {}) {\n        return get({\n            context: 'environment',\n            path: 'content_types',\n            config: createRequestConfig({ query }),\n        });\n    }\n    async function getEntry(id, query = {}) {\n        return makeGetEntry(id, query, options);\n    }\n    async function getEntries(query = {}) {\n        return makeGetEntries(query, options);\n    }\n    async function makeGetEntry(id, query, options = {\n        withAllLocales: false,\n        withoutLinkResolution: false,\n        withoutUnresolvableLinks: false,\n    }) {\n        const { withAllLocales } = options;\n        validateLocaleParam(query, withAllLocales);\n        validateResolveLinksParam(query);\n        validateRemoveUnresolvedParam(query);\n        validateSearchParameters(query);\n        return internalGetEntry(id, withAllLocales ? Object.assign(Object.assign({}, query), { locale: '*' }) : query, options);\n    }\n    async function internalGetEntry(id, query, options) {\n        if (!id) {\n            throw notFoundError(id);\n        }\n        try {\n            const response = await internalGetEntries(Object.assign({ 'sys.id': id }, maybeEnableSourceMaps(query)), options);\n            if (response.items.length > 0) {\n                return response.items[0];\n            }\n            else {\n                throw notFoundError(id);\n            }\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    async function makeGetEntries(query, options = {\n        withAllLocales: false,\n        withoutLinkResolution: false,\n        withoutUnresolvableLinks: false,\n    }) {\n        const { withAllLocales } = options;\n        validateLocaleParam(query, withAllLocales);\n        validateResolveLinksParam(query);\n        validateRemoveUnresolvedParam(query);\n        validateSearchParameters(query);\n        return internalGetEntries(withAllLocales\n            ? Object.assign(Object.assign({}, query), { locale: '*' }) : query, options);\n    }\n    async function internalGetEntries(query, options) {\n        const { withoutLinkResolution, withoutUnresolvableLinks } = options;\n        try {\n            const entries = await get({\n                context: 'environment',\n                path: 'entries',\n                config: createRequestConfig({\n                    query: maybeEnableSourceMaps(normalizeSearchParameters(normalizeSelect(query))),\n                }),\n            });\n            return resolveCircular(entries, {\n                resolveLinks: !withoutLinkResolution,\n                removeUnresolved: withoutUnresolvableLinks !== null && withoutUnresolvableLinks !== void 0 ? withoutUnresolvableLinks : false,\n            });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    async function getAsset(id, query = {}) {\n        return makeGetAsset(id, query, options);\n    }\n    async function getAssets(query = {}) {\n        return makeGetAssets(query, options);\n    }\n    async function makeGetAssets(query, options = {\n        withAllLocales: false,\n        withoutLinkResolution: false,\n        withoutUnresolvableLinks: false,\n    }) {\n        const { withAllLocales } = options;\n        validateLocaleParam(query, withAllLocales);\n        validateSearchParameters(query);\n        const localeSpecificQuery = withAllLocales ? Object.assign(Object.assign({}, query), { locale: '*' }) : query;\n        return internalGetAssets(localeSpecificQuery);\n    }\n    async function internalGetAsset(id, query) {\n        try {\n            return get({\n                context: 'environment',\n                path: `assets/${id}`,\n                config: createRequestConfig({ query: maybeEnableSourceMaps(normalizeSelect(query)) }),\n            });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    async function makeGetAsset(id, query, options = {\n        withAllLocales: false,\n        withoutLinkResolution: false,\n        withoutUnresolvableLinks: false,\n    }) {\n        const { withAllLocales } = options;\n        validateLocaleParam(query, withAllLocales);\n        validateSearchParameters(query);\n        const localeSpecificQuery = withAllLocales ? Object.assign(Object.assign({}, query), { locale: '*' }) : query;\n        return internalGetAsset(id, localeSpecificQuery);\n    }\n    async function internalGetAssets(query) {\n        try {\n            return get({\n                context: 'environment',\n                path: 'assets',\n                config: createRequestConfig({\n                    query: maybeEnableSourceMaps(normalizeSearchParameters(normalizeSelect(query))),\n                }),\n            });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    async function getTag(id) {\n        return get({\n            context: 'environment',\n            path: `tags/${id}`,\n        });\n    }\n    async function getTags(query = {}) {\n        validateSearchParameters(query);\n        return get({\n            context: 'environment',\n            path: 'tags',\n            config: createRequestConfig({ query: normalizeSearchParameters(normalizeSelect(query)) }),\n        });\n    }\n    async function createAssetKey(expiresAt) {\n        try {\n            const now = Math.floor(Date.now() / 1000);\n            const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\n            validateTimestamp('expiresAt', expiresAt, { maximum: currentMaxLifetime, now });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n        return post({\n            context: 'environment',\n            path: 'asset_keys',\n            data: { expiresAt },\n        });\n    }\n    async function getLocales(query = {}) {\n        validateSearchParameters(query);\n        return get({\n            context: 'environment',\n            path: 'locales',\n            config: createRequestConfig({ query: normalizeSelect(query) }),\n        });\n    }\n    async function sync(query, syncOptions = { paginate: true }) {\n        return makePagedSync(query, syncOptions, options);\n    }\n    async function makePagedSync(query, syncOptions, options = {\n        withAllLocales: false,\n        withoutLinkResolution: false,\n        withoutUnresolvableLinks: false,\n    }) {\n        validateResolveLinksParam(query);\n        validateRemoveUnresolvedParam(query);\n        const combinedOptions = Object.assign(Object.assign({}, syncOptions), options);\n        switchToEnvironment(http);\n        return pagedSync(http, query, combinedOptions);\n    }\n    function parseEntries(data) {\n        return makeParseEntries(data, options);\n    }\n    function makeParseEntries(data, options = {\n        withAllLocales: false,\n        withoutLinkResolution: false,\n        withoutUnresolvableLinks: false,\n    }) {\n        return internalParseEntries(data, options);\n    }\n    function internalParseEntries(data, options) {\n        const { withoutLinkResolution, withoutUnresolvableLinks } = options;\n        return resolveCircular(data, {\n            resolveLinks: !withoutLinkResolution,\n            removeUnresolved: withoutUnresolvableLinks !== null && withoutUnresolvableLinks !== undefined ? withoutUnresolvableLinks : false,\n        });\n    }\n    function getConceptScheme(id, query = {}) {\n        return internalGetConceptScheme(id, query);\n    }\n    async function internalGetConceptScheme(id, query = {}) {\n        try {\n            return get({\n                context: 'environment',\n                path: `taxonomy/concept-schemes/${id}`,\n                config: createRequestConfig({\n                    query: normalizeSearchParameters(normalizeSelect(query)),\n                }),\n            });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    function getConceptSchemes(query = {}) {\n        return internalGetConceptSchemes(query);\n    }\n    async function internalGetConceptSchemes(query = {}) {\n        try {\n            return get({\n                context: 'environment',\n                path: 'taxonomy/concept-schemes',\n                config: createRequestConfig({\n                    query: normalizeSearchParameters(normalizeSelect(query)),\n                }),\n            });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    function getConcept(id, query = {}) {\n        return internalGetConcept(id, query);\n    }\n    async function internalGetConcept(id, query = {}) {\n        try {\n            return get({\n                context: 'environment',\n                path: `taxonomy/concepts/${id}`,\n                config: createRequestConfig({\n                    query: normalizeSearchParameters(normalizeSelect(query)),\n                }),\n            });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    function getConcepts(query = {}) {\n        return internalGetConcepts(query);\n    }\n    async function internalGetConcepts(query = {}) {\n        try {\n            return get({\n                context: 'environment',\n                path: 'taxonomy/concepts',\n                config: createRequestConfig({\n                    query: normalizeSearchParameters(normalizeSelect(query)),\n                }),\n            });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    /*\n     * Switches BaseURL to use /environments path\n     * */\n    function switchToEnvironment(http) {\n        http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\n    }\n    return {\n        version: \"11.4.6\",\n        getSpace,\n        getContentType,\n        getContentTypes,\n        getAsset,\n        getAssets,\n        getTag,\n        getTags,\n        getLocales,\n        parseEntries,\n        sync,\n        getEntry,\n        getEntries,\n        getConceptScheme,\n        getConceptSchemes,\n        getConcept,\n        getConcepts,\n        createAssetKey,\n    };\n}\n\nexport { createContentfulApi as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}