{"ast":null,"code":"import { encodeCPAResponse } from '@contentful/content-source-maps';\nimport { createRequestConfig, errorHandler } from 'contentful-sdk-core';\nimport pagedSync from './paged-sync.js';\nimport normalizeSearchParameters from './utils/normalize-search-parameters.js';\nimport normalizeSelect from './utils/normalize-select.js';\nimport resolveCircular from './utils/resolve-circular.js';\nimport getQuerySelectionSet from './utils/query-selection-set.js';\nimport validateTimestamp from './utils/validate-timestamp.js';\nimport { validateLocaleParam, validateResolveLinksParam, validateRemoveUnresolvedParam, checkIncludeContentSourceMapsParamIsAllowed } from './utils/validate-params.js';\nimport validateSearchParameters from './utils/validate-search-parameters.js';\n\n/**\n * Contentful Delivery API Client. Contains methods which allow access to the\n * different kinds of entities present in Contentful (Entries, Assets, etc).\n */\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\nclass NotFoundError extends Error {\n  constructor(id, environment, space) {\n    super('The resource could not be found.');\n    this.sys = {\n      type: 'Error',\n      id: 'NotFound'\n    };\n    this.details = {\n      type: 'Entry',\n      id,\n      environment,\n      space\n    };\n  }\n}\nfunction createContentfulApi(_ref, options) {\n  let {\n    http,\n    getGlobalOptions\n  } = _ref;\n  const notFoundError = function () {\n    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unknown';\n    return new NotFoundError(id, getGlobalOptions().environment, getGlobalOptions().space);\n  };\n  const getBaseUrl = context => {\n    let baseUrl = context === 'space' ? getGlobalOptions().spaceBaseUrl : getGlobalOptions().environmentBaseUrl;\n    if (!baseUrl) {\n      throw new Error('Please define baseUrl for ' + context);\n    }\n    if (!baseUrl.endsWith('/')) {\n      baseUrl += '/';\n    }\n    return baseUrl;\n  };\n  function maybeEnableSourceMaps() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a, _b;\n    const params = http.httpClientParams;\n    const includeContentSourceMaps = (_a = params === null || params === undefined ? undefined : params.includeContentSourceMaps) !== null && _a !== undefined ? _a : (_b = params === null || params === undefined ? undefined : params.alphaFeatures) === null || _b === undefined ? undefined : _b.includeContentSourceMaps;\n    const host = params === null || params === undefined ? undefined : params.host;\n    const areAllowed = checkIncludeContentSourceMapsParamIsAllowed(host, includeContentSourceMaps);\n    if (areAllowed) {\n      query.includeContentSourceMaps = true;\n      // Ensure that content source maps and required attributes are selected\n      if (query.select) {\n        const selection = getQuerySelectionSet(query);\n        selection.add('sys');\n        query.select = Array.from(selection).join(',');\n      }\n    }\n    return query;\n  }\n  function maybeEncodeCPAResponse(data, config) {\n    var _a;\n    const includeContentSourceMaps = (_a = config === null || config === undefined ? undefined : config.params) === null || _a === undefined ? undefined : _a.includeContentSourceMaps;\n    if (includeContentSourceMaps) {\n      return encodeCPAResponse(data);\n    }\n    return data;\n  }\n  async function get(_ref2) {\n    let {\n      context,\n      path,\n      config\n    } = _ref2;\n    const baseUrl = getBaseUrl(context);\n    try {\n      const response = await http.get(baseUrl + path, config);\n      return maybeEncodeCPAResponse(response.data, config);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function post(_ref3) {\n    let {\n      context,\n      path,\n      data,\n      config\n    } = _ref3;\n    const baseUrl = getBaseUrl(context);\n    try {\n      const response = await http.post(baseUrl + path, data, config);\n      return response.data;\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function getSpace() {\n    return get({\n      context: 'space',\n      path: ''\n    });\n  }\n  async function getContentType(id) {\n    return get({\n      context: 'environment',\n      path: `content_types/${id}`\n    });\n  }\n  async function getContentTypes() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return get({\n      context: 'environment',\n      path: 'content_types',\n      config: createRequestConfig({\n        query\n      })\n    });\n  }\n  async function getEntry(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return makeGetEntry(id, query, options);\n  }\n  async function getEntries() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return makeGetEntries(query, options);\n  }\n  async function makeGetEntry(id, query) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      withAllLocales: false,\n      withoutLinkResolution: false,\n      withoutUnresolvableLinks: false\n    };\n    const {\n      withAllLocales\n    } = options;\n    validateLocaleParam(query, withAllLocales);\n    validateResolveLinksParam(query);\n    validateRemoveUnresolvedParam(query);\n    validateSearchParameters(query);\n    return internalGetEntry(id, withAllLocales ? Object.assign(Object.assign({}, query), {\n      locale: '*'\n    }) : query, options);\n  }\n  async function internalGetEntry(id, query, options) {\n    if (!id) {\n      throw notFoundError(id);\n    }\n    try {\n      const response = await internalGetEntries(Object.assign({\n        'sys.id': id\n      }, maybeEnableSourceMaps(query)), options);\n      if (response.items.length > 0) {\n        return response.items[0];\n      } else {\n        throw notFoundError(id);\n      }\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function makeGetEntries(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      withAllLocales: false,\n      withoutLinkResolution: false,\n      withoutUnresolvableLinks: false\n    };\n    const {\n      withAllLocales\n    } = options;\n    validateLocaleParam(query, withAllLocales);\n    validateResolveLinksParam(query);\n    validateRemoveUnresolvedParam(query);\n    validateSearchParameters(query);\n    return internalGetEntries(withAllLocales ? Object.assign(Object.assign({}, query), {\n      locale: '*'\n    }) : query, options);\n  }\n  async function internalGetEntries(query, options) {\n    const {\n      withoutLinkResolution,\n      withoutUnresolvableLinks\n    } = options;\n    try {\n      const entries = await get({\n        context: 'environment',\n        path: 'entries',\n        config: createRequestConfig({\n          query: maybeEnableSourceMaps(normalizeSearchParameters(normalizeSelect(query)))\n        })\n      });\n      return resolveCircular(entries, {\n        resolveLinks: !withoutLinkResolution,\n        removeUnresolved: withoutUnresolvableLinks !== null && withoutUnresolvableLinks !== void 0 ? withoutUnresolvableLinks : false\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function getAsset(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return makeGetAsset(id, query, options);\n  }\n  async function getAssets() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return makeGetAssets(query, options);\n  }\n  async function makeGetAssets(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      withAllLocales: false,\n      withoutLinkResolution: false,\n      withoutUnresolvableLinks: false\n    };\n    const {\n      withAllLocales\n    } = options;\n    validateLocaleParam(query, withAllLocales);\n    validateSearchParameters(query);\n    const localeSpecificQuery = withAllLocales ? Object.assign(Object.assign({}, query), {\n      locale: '*'\n    }) : query;\n    return internalGetAssets(localeSpecificQuery);\n  }\n  async function internalGetAsset(id, query) {\n    try {\n      return get({\n        context: 'environment',\n        path: `assets/${id}`,\n        config: createRequestConfig({\n          query: maybeEnableSourceMaps(normalizeSelect(query))\n        })\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function makeGetAsset(id, query) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      withAllLocales: false,\n      withoutLinkResolution: false,\n      withoutUnresolvableLinks: false\n    };\n    const {\n      withAllLocales\n    } = options;\n    validateLocaleParam(query, withAllLocales);\n    validateSearchParameters(query);\n    const localeSpecificQuery = withAllLocales ? Object.assign(Object.assign({}, query), {\n      locale: '*'\n    }) : query;\n    return internalGetAsset(id, localeSpecificQuery);\n  }\n  async function internalGetAssets(query) {\n    try {\n      return get({\n        context: 'environment',\n        path: 'assets',\n        config: createRequestConfig({\n          query: maybeEnableSourceMaps(normalizeSearchParameters(normalizeSelect(query)))\n        })\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function getTag(id) {\n    return get({\n      context: 'environment',\n      path: `tags/${id}`\n    });\n  }\n  async function getTags() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    validateSearchParameters(query);\n    return get({\n      context: 'environment',\n      path: 'tags',\n      config: createRequestConfig({\n        query: normalizeSearchParameters(normalizeSelect(query))\n      })\n    });\n  }\n  async function createAssetKey(expiresAt) {\n    try {\n      const now = Math.floor(Date.now() / 1000);\n      const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\n      validateTimestamp('expiresAt', expiresAt, {\n        maximum: currentMaxLifetime,\n        now\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n    return post({\n      context: 'environment',\n      path: 'asset_keys',\n      data: {\n        expiresAt\n      }\n    });\n  }\n  async function getLocales() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    validateSearchParameters(query);\n    return get({\n      context: 'environment',\n      path: 'locales',\n      config: createRequestConfig({\n        query: normalizeSelect(query)\n      })\n    });\n  }\n  async function sync(query) {\n    let syncOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      paginate: true\n    };\n    return makePagedSync(query, syncOptions, options);\n  }\n  async function makePagedSync(query, syncOptions) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      withAllLocales: false,\n      withoutLinkResolution: false,\n      withoutUnresolvableLinks: false\n    };\n    validateResolveLinksParam(query);\n    validateRemoveUnresolvedParam(query);\n    const combinedOptions = Object.assign(Object.assign({}, syncOptions), options);\n    switchToEnvironment(http);\n    return pagedSync(http, query, combinedOptions);\n  }\n  function parseEntries(data) {\n    return makeParseEntries(data, options);\n  }\n  function makeParseEntries(data) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      withAllLocales: false,\n      withoutLinkResolution: false,\n      withoutUnresolvableLinks: false\n    };\n    return internalParseEntries(data, options);\n  }\n  function internalParseEntries(data, options) {\n    const {\n      withoutLinkResolution,\n      withoutUnresolvableLinks\n    } = options;\n    return resolveCircular(data, {\n      resolveLinks: !withoutLinkResolution,\n      removeUnresolved: withoutUnresolvableLinks !== null && withoutUnresolvableLinks !== undefined ? withoutUnresolvableLinks : false\n    });\n  }\n  function getConceptScheme(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return internalGetConceptScheme(id, query);\n  }\n  async function internalGetConceptScheme(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    try {\n      return get({\n        context: 'environment',\n        path: `taxonomy/concept-schemes/${id}`,\n        config: createRequestConfig({\n          query: normalizeSearchParameters(normalizeSelect(query))\n        })\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  function getConceptSchemes() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return internalGetConceptSchemes(query);\n  }\n  async function internalGetConceptSchemes() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      return get({\n        context: 'environment',\n        path: 'taxonomy/concept-schemes',\n        config: createRequestConfig({\n          query: normalizeSearchParameters(normalizeSelect(query))\n        })\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  function getConcept(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return internalGetConcept(id, query);\n  }\n  async function internalGetConcept(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    try {\n      return get({\n        context: 'environment',\n        path: `taxonomy/concepts/${id}`,\n        config: createRequestConfig({\n          query: normalizeSearchParameters(normalizeSelect(query))\n        })\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  function getConcepts() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return internalGetConcepts(query);\n  }\n  async function internalGetConcepts() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      return get({\n        context: 'environment',\n        path: 'taxonomy/concepts',\n        config: createRequestConfig({\n          query: normalizeSearchParameters(normalizeSelect(query))\n        })\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /*\n   * Switches BaseURL to use /environments path\n   * */\n  function switchToEnvironment(http) {\n    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\n  }\n  return {\n    version: \"11.4.6\",\n    getSpace,\n    getContentType,\n    getContentTypes,\n    getAsset,\n    getAssets,\n    getTag,\n    getTags,\n    getLocales,\n    parseEntries,\n    sync,\n    getEntry,\n    getEntries,\n    getConceptScheme,\n    getConceptSchemes,\n    getConcept,\n    getConcepts,\n    createAssetKey\n  };\n}\nexport { createContentfulApi as default };","map":{"version":3,"names":["encodeCPAResponse","createRequestConfig","errorHandler","pagedSync","normalizeSearchParameters","normalizeSelect","resolveCircular","getQuerySelectionSet","validateTimestamp","validateLocaleParam","validateResolveLinksParam","validateRemoveUnresolvedParam","checkIncludeContentSourceMapsParamIsAllowed","validateSearchParameters","ASSET_KEY_MAX_LIFETIME","NotFoundError","Error","constructor","id","environment","space","sys","type","details","createContentfulApi","_ref","options","http","getGlobalOptions","notFoundError","arguments","length","undefined","getBaseUrl","context","baseUrl","spaceBaseUrl","environmentBaseUrl","endsWith","maybeEnableSourceMaps","query","_a","_b","params","httpClientParams","includeContentSourceMaps","alphaFeatures","host","areAllowed","select","selection","add","Array","from","join","maybeEncodeCPAResponse","data","config","get","_ref2","path","response","error","post","_ref3","getSpace","getContentType","getContentTypes","getEntry","makeGetEntry","getEntries","makeGetEntries","withAllLocales","withoutLinkResolution","withoutUnresolvableLinks","internalGetEntry","Object","assign","locale","internalGetEntries","items","entries","resolveLinks","removeUnresolved","getAsset","makeGetAsset","getAssets","makeGetAssets","localeSpecificQuery","internalGetAssets","internalGetAsset","getTag","getTags","createAssetKey","expiresAt","now","Math","floor","Date","currentMaxLifetime","maximum","getLocales","sync","syncOptions","paginate","makePagedSync","combinedOptions","switchToEnvironment","parseEntries","makeParseEntries","internalParseEntries","getConceptScheme","internalGetConceptScheme","getConceptSchemes","internalGetConceptSchemes","getConcept","internalGetConcept","getConcepts","internalGetConcepts","defaults","baseURL","version","default"],"sources":["/Users/julia.voortman/Documents/trugoodbeautiful/frontend/node_modules/contentful/dist/esm/create-contentful-api.js"],"sourcesContent":["import { encodeCPAResponse } from '@contentful/content-source-maps';\nimport { createRequestConfig, errorHandler } from 'contentful-sdk-core';\nimport pagedSync from './paged-sync.js';\nimport normalizeSearchParameters from './utils/normalize-search-parameters.js';\nimport normalizeSelect from './utils/normalize-select.js';\nimport resolveCircular from './utils/resolve-circular.js';\nimport getQuerySelectionSet from './utils/query-selection-set.js';\nimport validateTimestamp from './utils/validate-timestamp.js';\nimport { validateLocaleParam, validateResolveLinksParam, validateRemoveUnresolvedParam, checkIncludeContentSourceMapsParamIsAllowed } from './utils/validate-params.js';\nimport validateSearchParameters from './utils/validate-search-parameters.js';\n\n/**\n * Contentful Delivery API Client. Contains methods which allow access to the\n * different kinds of entities present in Contentful (Entries, Assets, etc).\n */\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\nclass NotFoundError extends Error {\n    constructor(id, environment, space) {\n        super('The resource could not be found.');\n        this.sys = {\n            type: 'Error',\n            id: 'NotFound',\n        };\n        this.details = {\n            type: 'Entry',\n            id,\n            environment,\n            space,\n        };\n    }\n}\nfunction createContentfulApi({ http, getGlobalOptions }, options) {\n    const notFoundError = (id = 'unknown') => {\n        return new NotFoundError(id, getGlobalOptions().environment, getGlobalOptions().space);\n    };\n    const getBaseUrl = (context) => {\n        let baseUrl = context === 'space' ? getGlobalOptions().spaceBaseUrl : getGlobalOptions().environmentBaseUrl;\n        if (!baseUrl) {\n            throw new Error('Please define baseUrl for ' + context);\n        }\n        if (!baseUrl.endsWith('/')) {\n            baseUrl += '/';\n        }\n        return baseUrl;\n    };\n    function maybeEnableSourceMaps(query = {}) {\n        var _a, _b;\n        const params = http.httpClientParams;\n        const includeContentSourceMaps = (_a = params === null || params === undefined ? undefined : params.includeContentSourceMaps) !== null && _a !== undefined ? _a : (_b = params === null || params === undefined ? undefined : params.alphaFeatures) === null || _b === undefined ? undefined : _b.includeContentSourceMaps;\n        const host = params === null || params === undefined ? undefined : params.host;\n        const areAllowed = checkIncludeContentSourceMapsParamIsAllowed(host, includeContentSourceMaps);\n        if (areAllowed) {\n            query.includeContentSourceMaps = true;\n            // Ensure that content source maps and required attributes are selected\n            if (query.select) {\n                const selection = getQuerySelectionSet(query);\n                selection.add('sys');\n                query.select = Array.from(selection).join(',');\n            }\n        }\n        return query;\n    }\n    function maybeEncodeCPAResponse(data, config) {\n        var _a;\n        const includeContentSourceMaps = (_a = config === null || config === undefined ? undefined : config.params) === null || _a === undefined ? undefined : _a.includeContentSourceMaps;\n        if (includeContentSourceMaps) {\n            return encodeCPAResponse(data);\n        }\n        return data;\n    }\n    async function get({ context, path, config }) {\n        const baseUrl = getBaseUrl(context);\n        try {\n            const response = await http.get(baseUrl + path, config);\n            return maybeEncodeCPAResponse(response.data, config);\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    async function post({ context, path, data, config }) {\n        const baseUrl = getBaseUrl(context);\n        try {\n            const response = await http.post(baseUrl + path, data, config);\n            return response.data;\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    async function getSpace() {\n        return get({ context: 'space', path: '' });\n    }\n    async function getContentType(id) {\n        return get({\n            context: 'environment',\n            path: `content_types/${id}`,\n        });\n    }\n    async function getContentTypes(query = {}) {\n        return get({\n            context: 'environment',\n            path: 'content_types',\n            config: createRequestConfig({ query }),\n        });\n    }\n    async function getEntry(id, query = {}) {\n        return makeGetEntry(id, query, options);\n    }\n    async function getEntries(query = {}) {\n        return makeGetEntries(query, options);\n    }\n    async function makeGetEntry(id, query, options = {\n        withAllLocales: false,\n        withoutLinkResolution: false,\n        withoutUnresolvableLinks: false,\n    }) {\n        const { withAllLocales } = options;\n        validateLocaleParam(query, withAllLocales);\n        validateResolveLinksParam(query);\n        validateRemoveUnresolvedParam(query);\n        validateSearchParameters(query);\n        return internalGetEntry(id, withAllLocales ? Object.assign(Object.assign({}, query), { locale: '*' }) : query, options);\n    }\n    async function internalGetEntry(id, query, options) {\n        if (!id) {\n            throw notFoundError(id);\n        }\n        try {\n            const response = await internalGetEntries(Object.assign({ 'sys.id': id }, maybeEnableSourceMaps(query)), options);\n            if (response.items.length > 0) {\n                return response.items[0];\n            }\n            else {\n                throw notFoundError(id);\n            }\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    async function makeGetEntries(query, options = {\n        withAllLocales: false,\n        withoutLinkResolution: false,\n        withoutUnresolvableLinks: false,\n    }) {\n        const { withAllLocales } = options;\n        validateLocaleParam(query, withAllLocales);\n        validateResolveLinksParam(query);\n        validateRemoveUnresolvedParam(query);\n        validateSearchParameters(query);\n        return internalGetEntries(withAllLocales\n            ? Object.assign(Object.assign({}, query), { locale: '*' }) : query, options);\n    }\n    async function internalGetEntries(query, options) {\n        const { withoutLinkResolution, withoutUnresolvableLinks } = options;\n        try {\n            const entries = await get({\n                context: 'environment',\n                path: 'entries',\n                config: createRequestConfig({\n                    query: maybeEnableSourceMaps(normalizeSearchParameters(normalizeSelect(query))),\n                }),\n            });\n            return resolveCircular(entries, {\n                resolveLinks: !withoutLinkResolution,\n                removeUnresolved: withoutUnresolvableLinks !== null && withoutUnresolvableLinks !== void 0 ? withoutUnresolvableLinks : false,\n            });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    async function getAsset(id, query = {}) {\n        return makeGetAsset(id, query, options);\n    }\n    async function getAssets(query = {}) {\n        return makeGetAssets(query, options);\n    }\n    async function makeGetAssets(query, options = {\n        withAllLocales: false,\n        withoutLinkResolution: false,\n        withoutUnresolvableLinks: false,\n    }) {\n        const { withAllLocales } = options;\n        validateLocaleParam(query, withAllLocales);\n        validateSearchParameters(query);\n        const localeSpecificQuery = withAllLocales ? Object.assign(Object.assign({}, query), { locale: '*' }) : query;\n        return internalGetAssets(localeSpecificQuery);\n    }\n    async function internalGetAsset(id, query) {\n        try {\n            return get({\n                context: 'environment',\n                path: `assets/${id}`,\n                config: createRequestConfig({ query: maybeEnableSourceMaps(normalizeSelect(query)) }),\n            });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    async function makeGetAsset(id, query, options = {\n        withAllLocales: false,\n        withoutLinkResolution: false,\n        withoutUnresolvableLinks: false,\n    }) {\n        const { withAllLocales } = options;\n        validateLocaleParam(query, withAllLocales);\n        validateSearchParameters(query);\n        const localeSpecificQuery = withAllLocales ? Object.assign(Object.assign({}, query), { locale: '*' }) : query;\n        return internalGetAsset(id, localeSpecificQuery);\n    }\n    async function internalGetAssets(query) {\n        try {\n            return get({\n                context: 'environment',\n                path: 'assets',\n                config: createRequestConfig({\n                    query: maybeEnableSourceMaps(normalizeSearchParameters(normalizeSelect(query))),\n                }),\n            });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    async function getTag(id) {\n        return get({\n            context: 'environment',\n            path: `tags/${id}`,\n        });\n    }\n    async function getTags(query = {}) {\n        validateSearchParameters(query);\n        return get({\n            context: 'environment',\n            path: 'tags',\n            config: createRequestConfig({ query: normalizeSearchParameters(normalizeSelect(query)) }),\n        });\n    }\n    async function createAssetKey(expiresAt) {\n        try {\n            const now = Math.floor(Date.now() / 1000);\n            const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\n            validateTimestamp('expiresAt', expiresAt, { maximum: currentMaxLifetime, now });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n        return post({\n            context: 'environment',\n            path: 'asset_keys',\n            data: { expiresAt },\n        });\n    }\n    async function getLocales(query = {}) {\n        validateSearchParameters(query);\n        return get({\n            context: 'environment',\n            path: 'locales',\n            config: createRequestConfig({ query: normalizeSelect(query) }),\n        });\n    }\n    async function sync(query, syncOptions = { paginate: true }) {\n        return makePagedSync(query, syncOptions, options);\n    }\n    async function makePagedSync(query, syncOptions, options = {\n        withAllLocales: false,\n        withoutLinkResolution: false,\n        withoutUnresolvableLinks: false,\n    }) {\n        validateResolveLinksParam(query);\n        validateRemoveUnresolvedParam(query);\n        const combinedOptions = Object.assign(Object.assign({}, syncOptions), options);\n        switchToEnvironment(http);\n        return pagedSync(http, query, combinedOptions);\n    }\n    function parseEntries(data) {\n        return makeParseEntries(data, options);\n    }\n    function makeParseEntries(data, options = {\n        withAllLocales: false,\n        withoutLinkResolution: false,\n        withoutUnresolvableLinks: false,\n    }) {\n        return internalParseEntries(data, options);\n    }\n    function internalParseEntries(data, options) {\n        const { withoutLinkResolution, withoutUnresolvableLinks } = options;\n        return resolveCircular(data, {\n            resolveLinks: !withoutLinkResolution,\n            removeUnresolved: withoutUnresolvableLinks !== null && withoutUnresolvableLinks !== undefined ? withoutUnresolvableLinks : false,\n        });\n    }\n    function getConceptScheme(id, query = {}) {\n        return internalGetConceptScheme(id, query);\n    }\n    async function internalGetConceptScheme(id, query = {}) {\n        try {\n            return get({\n                context: 'environment',\n                path: `taxonomy/concept-schemes/${id}`,\n                config: createRequestConfig({\n                    query: normalizeSearchParameters(normalizeSelect(query)),\n                }),\n            });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    function getConceptSchemes(query = {}) {\n        return internalGetConceptSchemes(query);\n    }\n    async function internalGetConceptSchemes(query = {}) {\n        try {\n            return get({\n                context: 'environment',\n                path: 'taxonomy/concept-schemes',\n                config: createRequestConfig({\n                    query: normalizeSearchParameters(normalizeSelect(query)),\n                }),\n            });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    function getConcept(id, query = {}) {\n        return internalGetConcept(id, query);\n    }\n    async function internalGetConcept(id, query = {}) {\n        try {\n            return get({\n                context: 'environment',\n                path: `taxonomy/concepts/${id}`,\n                config: createRequestConfig({\n                    query: normalizeSearchParameters(normalizeSelect(query)),\n                }),\n            });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    function getConcepts(query = {}) {\n        return internalGetConcepts(query);\n    }\n    async function internalGetConcepts(query = {}) {\n        try {\n            return get({\n                context: 'environment',\n                path: 'taxonomy/concepts',\n                config: createRequestConfig({\n                    query: normalizeSearchParameters(normalizeSelect(query)),\n                }),\n            });\n        }\n        catch (error) {\n            errorHandler(error);\n        }\n    }\n    /*\n     * Switches BaseURL to use /environments path\n     * */\n    function switchToEnvironment(http) {\n        http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\n    }\n    return {\n        version: \"11.4.6\",\n        getSpace,\n        getContentType,\n        getContentTypes,\n        getAsset,\n        getAssets,\n        getTag,\n        getTags,\n        getLocales,\n        parseEntries,\n        sync,\n        getEntry,\n        getEntries,\n        getConceptScheme,\n        getConceptSchemes,\n        getConcept,\n        getConcepts,\n        createAssetKey,\n    };\n}\n\nexport { createContentfulApi as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}