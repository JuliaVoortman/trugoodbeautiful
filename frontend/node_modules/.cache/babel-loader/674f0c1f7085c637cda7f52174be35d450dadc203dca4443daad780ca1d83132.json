{"ast":null,"code":"import qs from 'qs';\n// Matches 'sub.host:port' or 'host:port' and extracts hostname and port\n// Also enforces toplevel domain specified, no spaces and no protocol\nconst HOST_REGEX = /^(?!\\w+:\\/\\/)([^\\s:]+\\.?[^\\s:]+)(?::(\\d+))?(?!:)$/;\n/**\n * Create default options\n * @private\n * @param {CreateHttpClientParams} options - Initialization parameters for the HTTP client\n * @return {DefaultOptions} options to pass to axios\n */\nexport default function createDefaultOptions(options) {\n  const defaultConfig = {\n    insecure: false,\n    retryOnError: true,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    logHandler: (level, data) => {\n      if (level === 'error' && data) {\n        const title = [data.name, data.message].filter(a => a).join(' - ');\n        console.error(`[error] ${title}`);\n        console.error(data);\n        return;\n      }\n      console.log(`[${level}] ${data}`);\n    },\n    // Passed to axios\n    headers: {},\n    httpAgent: false,\n    httpsAgent: false,\n    timeout: 30000,\n    throttle: 0,\n    basePath: '',\n    adapter: undefined,\n    maxContentLength: 1073741824,\n    // 1GB\n    maxBodyLength: 1073741824 // 1GB\n  };\n  const config = {\n    ...defaultConfig,\n    ...options\n  };\n  if (!config.accessToken) {\n    const missingAccessTokenError = new TypeError('Expected parameter accessToken');\n    config.logHandler('error', missingAccessTokenError);\n    throw missingAccessTokenError;\n  }\n  // Construct axios baseURL option\n  const protocol = config.insecure ? 'http' : 'https';\n  const space = config.space ? `${config.space}/` : '';\n  let hostname = config.defaultHostname;\n  let port = config.insecure ? 80 : 443;\n  if (config.host && HOST_REGEX.test(config.host)) {\n    const parsed = config.host.split(':');\n    if (parsed.length === 2) {\n      ;\n      [hostname, port] = parsed;\n    } else {\n      hostname = parsed[0];\n    }\n  }\n  // Ensure that basePath does start but not end with a slash\n  if (config.basePath) {\n    config.basePath = `/${config.basePath.split('/').filter(Boolean).join('/')}`;\n  }\n  const baseURL = options.baseURL || `${protocol}://${hostname}:${port}${config.basePath}/spaces/${space}`;\n  if (!config.headers.Authorization && typeof config.accessToken !== 'function') {\n    config.headers.Authorization = 'Bearer ' + config.accessToken;\n  }\n  const axiosOptions = {\n    // Axios\n    baseURL,\n    headers: config.headers,\n    httpAgent: config.httpAgent,\n    httpsAgent: config.httpsAgent,\n    proxy: config.proxy,\n    timeout: config.timeout,\n    adapter: config.adapter,\n    maxContentLength: config.maxContentLength,\n    maxBodyLength: config.maxBodyLength,\n    paramsSerializer: {\n      serialize: params => {\n        return qs.stringify(params);\n      }\n    },\n    // Contentful\n    logHandler: config.logHandler,\n    responseLogger: config.responseLogger,\n    requestLogger: config.requestLogger,\n    retryOnError: config.retryOnError\n  };\n  return axiosOptions;\n}","map":{"version":3,"names":["qs","HOST_REGEX","createDefaultOptions","options","defaultConfig","insecure","retryOnError","logHandler","level","data","title","name","message","filter","a","join","console","error","log","headers","httpAgent","httpsAgent","timeout","throttle","basePath","adapter","undefined","maxContentLength","maxBodyLength","config","accessToken","missingAccessTokenError","TypeError","protocol","space","hostname","defaultHostname","port","host","test","parsed","split","length","Boolean","baseURL","Authorization","axiosOptions","proxy","paramsSerializer","serialize","params","stringify","responseLogger","requestLogger"],"sources":["/Users/julia.voortman/Documents/trugoodbeautiful/frontend/node_modules/contentful-sdk-core/dist/create-default-options.js"],"sourcesContent":["import qs from 'qs';\n// Matches 'sub.host:port' or 'host:port' and extracts hostname and port\n// Also enforces toplevel domain specified, no spaces and no protocol\nconst HOST_REGEX = /^(?!\\w+:\\/\\/)([^\\s:]+\\.?[^\\s:]+)(?::(\\d+))?(?!:)$/;\n/**\n * Create default options\n * @private\n * @param {CreateHttpClientParams} options - Initialization parameters for the HTTP client\n * @return {DefaultOptions} options to pass to axios\n */\nexport default function createDefaultOptions(options) {\n    const defaultConfig = {\n        insecure: false,\n        retryOnError: true,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        logHandler: (level, data) => {\n            if (level === 'error' && data) {\n                const title = [data.name, data.message].filter((a) => a).join(' - ');\n                console.error(`[error] ${title}`);\n                console.error(data);\n                return;\n            }\n            console.log(`[${level}] ${data}`);\n        },\n        // Passed to axios\n        headers: {},\n        httpAgent: false,\n        httpsAgent: false,\n        timeout: 30000,\n        throttle: 0,\n        basePath: '',\n        adapter: undefined,\n        maxContentLength: 1073741824, // 1GB\n        maxBodyLength: 1073741824, // 1GB\n    };\n    const config = {\n        ...defaultConfig,\n        ...options,\n    };\n    if (!config.accessToken) {\n        const missingAccessTokenError = new TypeError('Expected parameter accessToken');\n        config.logHandler('error', missingAccessTokenError);\n        throw missingAccessTokenError;\n    }\n    // Construct axios baseURL option\n    const protocol = config.insecure ? 'http' : 'https';\n    const space = config.space ? `${config.space}/` : '';\n    let hostname = config.defaultHostname;\n    let port = config.insecure ? 80 : 443;\n    if (config.host && HOST_REGEX.test(config.host)) {\n        const parsed = config.host.split(':');\n        if (parsed.length === 2) {\n            ;\n            [hostname, port] = parsed;\n        }\n        else {\n            hostname = parsed[0];\n        }\n    }\n    // Ensure that basePath does start but not end with a slash\n    if (config.basePath) {\n        config.basePath = `/${config.basePath.split('/').filter(Boolean).join('/')}`;\n    }\n    const baseURL = options.baseURL || `${protocol}://${hostname}:${port}${config.basePath}/spaces/${space}`;\n    if (!config.headers.Authorization && typeof config.accessToken !== 'function') {\n        config.headers.Authorization = 'Bearer ' + config.accessToken;\n    }\n    const axiosOptions = {\n        // Axios\n        baseURL,\n        headers: config.headers,\n        httpAgent: config.httpAgent,\n        httpsAgent: config.httpsAgent,\n        proxy: config.proxy,\n        timeout: config.timeout,\n        adapter: config.adapter,\n        maxContentLength: config.maxContentLength,\n        maxBodyLength: config.maxBodyLength,\n        paramsSerializer: {\n            serialize: (params) => {\n                return qs.stringify(params);\n            },\n        },\n        // Contentful\n        logHandler: config.logHandler,\n        responseLogger: config.responseLogger,\n        requestLogger: config.requestLogger,\n        retryOnError: config.retryOnError,\n    };\n    return axiosOptions;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}